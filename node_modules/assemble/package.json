{
  "name": "assemble",
  "description": "Static site generator for Grunt.js, Yeoman and Node.js. Used by Zurb Foundation, Zurb Ink, H5BP/Effeckt, Less.js / lesscss.org, Topcoat, Web Experience Toolkit, and hundreds of other projects to build sites, themes, components, documentation, blogs and gh-pages.",
  "version": "0.6.0-beta.5",
  "homepage": "http://assemble.io",
  "author": {
    "name": "Assemble",
    "url": "https://github.com/assemble/assemble"
  },
  "maintainers": [
    {
      "name": "Brian Woodward",
      "url": "https://github.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/assemble/assemble.git"
  },
  "bugs": {
    "url": "git://github.com/assemble/assemble/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/assemble/assemble/blob/master/LICENSE"
  },
  "files": [
    "index.js",
    "lib/",
    "bin/",
    "completion/"
  ],
  "main": "./lib/index.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "bin": {
    "assemble": "./bin/assemble.js"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "archy": "^1.0.0",
    "array-slice": "^0.2.2",
    "assemble-utils": "^0.2.0",
    "chalk": "^1.0.0",
    "computed-property": "^0.1.2",
    "engine-assemble": "^0.4.0",
    "event-stream": "^3.3.0",
    "extend-shallow": "^1.1.2",
    "gulp-drafts": "^0.1.0",
    "gulp-util": "^3.0.4",
    "interpret": "^0.5.1",
    "liftoff": "^2.0.2",
    "lodash": "^3.5.0",
    "minimist": "^1.1.1",
    "object.reduce": "^0.1.3",
    "orchestrator": "^0.3.7",
    "parse-filepath": "^0.5.0",
    "parser-front-matter": "^1.2.0",
    "pretty-hrtime": "^1.0.0",
    "relative-dest": "^0.1.0",
    "rewrite-ext": "^0.2.0",
    "semver": "^4.3.1",
    "sessionify": "^0.1.0",
    "template": "^0.12.6",
    "template-init": "^0.3.0",
    "template-render": "^0.4.1",
    "template-utils": "^0.5.1",
    "through2": "^0.6.3",
    "tildify": "^1.0.0",
    "vinyl-fs": "^1.0.0",
    "word-wrap": "^1.0.2"
  },
  "devDependencies": {
    "consolidate": "^0.11.0",
    "graceful-fs": "^3.0.5",
    "gray-matter": "^1.2.3",
    "gulp-istanbul": "^0.6.0",
    "gulp-jshint": "^1.9.2",
    "gulp-mocha": "^2.0.0",
    "gulp-tap": "^0.1.3",
    "jshint-stylish": "^1.0.0",
    "load-helpers": "^0.1.0",
    "mkdirp": "^0.5.0",
    "mocha": "^2.1.0",
    "q": "^1.1.2",
    "rimraf": "^2.2.8",
    "should": "^5.0.0",
    "verb": "^0.6.2"
  },
  "keywords": [
    "HTML",
    "blog",
    "boilerplate",
    "boilerplates",
    "bootstrap",
    "build",
    "builder",
    "components",
    "front-matter",
    "generate",
    "generator",
    "handlebars",
    "helpers",
    "jekyll",
    "pages",
    "partial",
    "partials",
    "scaffold",
    "scaffolds",
    "site",
    "static",
    "task",
    "templates",
    "templating",
    "website",
    "yaml",
    "yeoman"
  ],
  "verb": {
    "deps": {
      "ignore": [
        "coverage"
      ]
    }
  },
  "readme": "# assemble [![NPM version](https://badge.fury.io/js/assemble.svg)](http://badge.fury.io/js/assemble)\n\n> Static site generator for Grunt.js, Yeoman and Node.js. Used by Zurb Foundation, Zurb Ink, H5BP/Effeckt, Less.js / lesscss.org, Topcoat, Web Experience Toolkit, and hundreds of other projects to build sites, themes, components, documentation, blogs and gh-pages.\n\n### Install globally\n\n**Install globally with [npm](npmjs.org)**\n\n```bash\nnpm i -g assemble@beta\n```\n\n### CLI\n\n**Install locally with [npm](npmjs.org)**\n\n```bash\nnpm i assemble@beta --save\n```\n\n## Usage\n\n**Example assemblefile.js**\n\n```js\nvar assemble = require('assemble');\nvar extname = require('gulp-extname');\nvar less = require('gulp-less');\n\nassemble.task('html', function() {\n  assemble.src('templates/*.hbs')\n    .pipe(extname())\n    .pipe(assemble.dest('dist/'));\n});\n\nassemble.task('css', function () {\n  assemble.src('styles/*.less')\n    .pipe(less())\n    .pipe(assemble.dest('dist/assets/css'));\n});\n\nassemble.task('default', ['html', 'css']);\n```\n\n### Example: Templates\n\nGenerate HTML from templates. _(Assemble automatically renders handlebars templates, but custom engines and plugins may also be used.)_\n\n```js\nvar assemble = require('assemble');\nvar extname = require('gulp-extname');\n\nassemble.task('default', function () {\n  assemble.src('templates/*.hbs')\n    .pipe(extname())\n    .pipe(assemble.dest('dist'));\n});\n```\n\nRun `assemble` from the command line to run the `default` task in your `assemblefile.js`.\n\n\n### Example: Pre-process CSS\n\n**Using a plugin**\n\nUse plugins to pre-process CSS (Assemble can run any gulp plugin):\n\n```js\nvar assemble = require('assemble');\nvar less = require('gulp-less');\n\nassemble.task('css', function () {\n  assemble.src('styles/*.less')\n    .pipe(less())\n    .pipe(assemble.dest('dist/assets/css'));\n});\n\nassemble.task('default', ['css']);\n```\n\n**Or, using an engine**\n\nInstead of a plugin you can register an engine, such as [engine-less](https://github.com/jonschlinkert/engine-less).\n\n_(Engines are run automatically on any files that have a file extension matching the name that you used when registering the engine.)_\n\n```js\nvar assemble = require('assemble');\nassemble.engine('less', require('engine-less'));\n\nassemble.task('css', function () {\n  assemble.src('styles/*.less')\n    .pipe(assemble.dest('dist/assets/css'));\n});\n\nassemble.task('default', ['css']);\n```\n\n\n***\n\n# API\n\n<br>\n\n## Templates\n\n### .partial\n\n> Add partials to be used in other templates.\n\n```js\nassemble.partial('notice', { content: '<strong>...</strong>' });\nassemble.partial('banner', { content: '/*! Copyright (c) 2014 Jon Schlinkert, Brian Woodward... */' });\n// or load a glob of partials\nassemble.partials('partials/*.hbs');\n\n// optionally pass locals, all template types support this\nassemble.partials('partials/*.hbs', {site: {title: 'Code Project'}});\n```\n\n**Usage**\n\nUse the `partial` helper to inject into other templates:\n\n```js\n{{partial \"banner\"}}\n```\n\nGet a cached partial:\n\n```js\nvar banner = assemble.views.partials['banner'];\n```\n\n### .page\n\n> Add pages that might be rendered (really, any template is renderable, pages fit the part though)\n\n```js\nassemble.page('toc.hbs', { content: 'Table of Contents...'});\n// or load a glob of pages\nassemble.pages('pages/*.hbs', {site: {title: 'Code Project'}});\n```\n\nUse the `page` helper to inject pages into other templates:\n\n```js\n{{page \"toc\"}}\n```\n\nGet a cached page:\n\n```js\nvar toc = assemble.views.pages['toc'];\n```\n\nPages are `renderable` templates, so they also have a `.render()` method:\n\n```js\nvar toc = assemble.views.pages['toc'];\n// async\ntoc.render({}, function(err, content) {\n  console.log(content);\n});\n\n// or sync\nvar res = toc.render();\n```\n\n**Params**\n\n - `locals` **{Object}**: Optionally pass locals as the first arg\n - `callback` **{Function}**: If a callback is passed, the template will be rendered async, otherwise sync.\n\n\n### .layout\n\n> Add layouts, which are used to \"wrap\" other templates:\n\n```js\nassemble.layout('default', {content: [\n  '<!DOCTYPE html>',\n  '  <html lang=\"en\">',\n  '  <head>',\n  '    <meta charset=\"UTF-8\">',\n  '    <title>{%= title %}</title>',\n  '  </head>',\n  '  <body>',\n  '    {% body %}', // `body` is the insertion point for another template\n  '  </body>',\n  '</html>'\n].join('\\n')});\n\n// or load a glob of layouts\nassemble.layouts('layouts/*.hbs', {site: {title: 'Code Project'}});\n```\n\nLayouts may be use with any other template, including other layouts. Any level of nesting is also possible.\n\n**Body tags**\n\nLayouts use a `body` as the insertion point for other templates. The syntax assemble uses for the `body` tag is:\n\n```js\n{% body %}\n```\n\nAdmittedly, it's a strange syntax, but that's why we're using it. assemble shouldn't collide with templates that you might be using in your documentation.\n\n\n**Usage**\n\nLayouts can be defined in template locals:\n\n```js\n// either of these work (one object or two)\nassemble.page('toc.hbs', { content: 'Table of Contents...'}, { layout: 'default' });\nassemble.partial('foo.hbs', { content: 'partial stuff', layout: 'block' });\n```\n\nOr in the front matter of a template. For example, here is how another layout would use our layout example from earlier:\n\n```js\n// using this 'inline' template format to make it easy to see what's happening\n// this could be loaded from a file too\nassemble.layout('sidebar', {content: [\n  '---',\n  'layout: default',\n  '---',\n  '<div>',\n  ' {% body %}',\n  '</div>'\n].join('\\n')});\n```\n\n### .engine\n\n> Add engines for rendering templates.\n\n```js\n// render any files with a `.tmpl` extension using engine-lodash\nassemble.engine('tmpl', require('engine-lodash'));\n\n// render any files with a `.less` extension using engine-less\nassemble.engine('less', require('engine-less'));\n```\n\n\n### .helper\n\n> Add helpers to be used in templates.\n\nHelpers are passed to the template engine being used at render time. \n\n**Custom helper**\n\n```js\nassemble.helper('read', function(filepath) {\n  return fs.readFileSync(filepath, 'utf8');\n});\n//=> {{read \"foo.txt\"}}\n```\n\n**Register a glob of helpers**\n\n```js\nassemble.helpers('helpers/*.js');\n```\n\n**Pro tip**\n\nIf you want to publish your helpers and share them with the community, make them as generic as possible so they work with any template engine.\n\n\n# Data\n\n### .data\n\n> Load data to pass to templates.\n\nAny of these work:\n\n```js\nassemble.data({foo: 'bar'});\nassemble.data('package.json');\nassemble.data(['foo/*.{json,yml}']);\n```\n\n# Constructor\n\n\n## Run tests\nInstall dev dependencies.\n\n```bash\nnpm i -d && npm test\n```\n\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](git://github.com/assemble/assemble/issues)\n\n\n## Authors\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n**Brian Woodward**\n\n+ [github/doowb](https://github.com/doowb)\n+ [twitter/doowb](http://twitter.com/doowb)\n\n\n## License\nCopyright (c) 2014-2015 Assemble  \nCopyright (c) 2014 Fractal <contact@wearefractal.com> (for completions and CLI)\nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 29, 2015._\n",
  "readmeFilename": "README.md",
  "_id": "assemble@0.6.0-beta.5",
  "_shasum": "6f66c56fcfca67de3f2125c1f878a30035bf4f6c",
  "_resolved": "git://github.com/assemble/assemble#d75ae80efa0fef63ad4ab8768cdad0e3837ff3ac",
  "_from": "git://github.com/assemble/assemble#v0.6.0",
  "_fromGithub": true
}
